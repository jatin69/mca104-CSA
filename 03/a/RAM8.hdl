// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

/**
 * Author : Jatin Rohilla
 * Course : MCA 104
 * 
 * Dependencies : Register, DMux8Way (1x8 DMux) and Mux8Way16 (8x1 Mux)
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:

    /* Implementing a 8 byte RAM */

    // use selection lines to select one of the 8 registers
    DMux8Way(in=load, sel=address[0..2], 
    		a=loada, b=loadb, c=loadc, d=loadd,
    		e=loade, f=loadf, g=loadg, h=loadh);

   	// load the input in the register
    Register(in=in, load=loada, out=outa);
    Register(in=in, load=loadb, out=outb);
    Register(in=in, load=loadc, out=outc);
    Register(in=in, load=loadd, out=outd);
    Register(in=in, load=loade, out=oute);
    Register(in=in, load=loadf, out=outf);
    Register(in=in, load=loadg, out=outg);
    Register(in=in, load=loadh, out=outh);

    // output the value based on selection lines
    Mux8Way16(a=outa, b=outb, c=outc, d=outd,
              e=oute, f=outf, g=outg, h=outh, 
              sel=address[0..2], out=out);
}